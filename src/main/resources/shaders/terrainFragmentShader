#version 400 core

#define NUM_TEXTURES 40
#define TEXTURE_ARRAY_SIZE NUM_TEXTURES / 4

in vec3 passNormal;
in vec3 passTextureCoords;
in vec4 passTextureWeights[TEXTURE_ARRAY_SIZE];
in vec3 viewDirection;

out vec4 outColor;

uniform sampler2D grassSampler;
uniform sampler2D slopeSampler;
uniform sampler2D rockSampler;
uniform sampler2D baseSampler;

uniform sampler2DArray samplers;

vec4 getTriplanarTexturing(in sampler2D sampler, in vec3 textureCoords, in vec3 weights) {
	return texture(sampler, textureCoords.yz) * weights.x +
			texture(sampler, textureCoords.xz) * weights.y +
			texture(sampler, textureCoords.xy) * weights.z;
}

vec4 getTriplanarTexturingArrays(in sampler2DArray sampler, in vec3 textureCoords, in int index, in vec3 weights) {
	return texture(sampler, vec3(textureCoords.yz, index)) * weights.x +
			texture(sampler, vec3(textureCoords.xz, index)) * weights.y +
			texture(sampler, vec3(textureCoords.xy, index)) * weights.z;
}

void main(void) {
	vec3 preBlendWeights = abs(passNormal);
	vec3 blendWeights = preBlendWeights / (preBlendWeights.x + preBlendWeights.y + preBlendWeights.z);

	float sumWeights = 0;
	vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
	for (int i = 0; i < NUM_TEXTURES; i++) {
		float weight = passTextureWeights[i / 4][i % 4];
		vec4 currentColor = getTriplanarTexturingArrays(samplers, passTextureCoords, i, blendWeights);
        currentColor += (1.0 - currentColor.a) * vec4(0.0, 1.0, 0.0, 1.0);
		color += weight * currentColor;
		sumWeights += weight;
	}
	color = color / sumWeights;

	vec3 sunlightDirection = normalize(vec3(0.5, 1, 0));
	vec3 lightColor = vec3(1, 1, 1);
	float ambientStrength = 0.2;
	vec3 ambient = ambientStrength * lightColor;
	float diffuseStrength = max(dot(passNormal, sunlightDirection), 0);
	vec3 diffuse = diffuseStrength * lightColor;
	float specularStrength = 2;
	vec3 reflectDirection = reflect(-sunlightDirection, passNormal);
	vec3 specular = specularStrength * pow(max(dot(viewDirection, reflectDirection), 0), 32) * lightColor;
	vec3 result = (ambient + diffuse + specular) * color.rgb;
	outColor = vec4(result, 1);
}